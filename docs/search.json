[
  {
    "objectID": "hw6.html",
    "href": "hw6.html",
    "title": "hw6.qmd",
    "section": "",
    "text": "What is the purpose of the lapply() function? What is the equivalent purrr function?\n\nlapply applies a function to each element of a list\npurrr equivalent function is map ()\n\nSuppose we have a list called my_list. Each element of the list is a numeric data frame (all columns are numeric). Write code to use lapply() to run the code cor(numeric_matrix, method = “kendall”)\n\n\nlibrary(purrr)\nhelp(\"matrix\")\nnumeric_matrix &lt;- list(matrix(rnorm(25), ncol=5), matrix(rnorm(25), ncol=5))\nlapply_example &lt;- lapply(numeric_matrix, FUN = cor,  method = \"kendall\")\n\n\nWhat are two advantages of using purrr functions instead of the BaseR apply family?\n\nautomatic handling of data types and type consistency through the map_* functions\naddressing the same inconsistent approach to function arguments and implementations in BaseR.\n\nWhat is a side-effect function?\n\nA side effect function is a function that represents, but does not alter the underlying data (e.g. print)\n\nWhy can you name a variable sd in a function and not cause any issues with the sd function?\n\nNamespace and scoping. Variables inside of functions are scoped to the local function. This means the variable will only exist during the function runtime. Once the function returns, the sd variable will be deallocated from memory. Since the function sd is a different object in a separately scoped namespace (stats) than the variable sd, R will only look for a more global scope if no locally scoped sd object does not exist.\n\n\n\n\n\n\n\n\ngetRMSE &lt;- function (response, predicted){\n  sqrt(mean((response - predicted)^2))\n}\n\n\n\n\ngetRMSE &lt;- function (response, predicted, ...){\n  sqrt(mean((response - predicted)^2, ...))\n}\n\n\n\n\n\n\n\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10 * x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\nrmse_tst &lt;- getRMSE(resp, pred)\nprint(paste0(\"RMSE + all numeric: \", rmse_tst[1]))\n\n[1] \"RMSE + all numeric: 0.958167655151933\"\n\n\n\n\n\n\nrando_index_1 &lt;- sample(length(resp),1)\nrando_index_2 &lt;- sample(length(pred),1)\nresp[rando_index_1] &lt;- NA_real_\npred[rando_index_2] &lt;- NA_real_\nrmse_tst &lt;- getRMSE(resp, pred, na.rm = TRUE)\nprint(paste0(\"RMSE + na.rm = TRUE: \", rmse_tst[1]))\n\n[1] \"RMSE + na.rm = TRUE: 0.965990608767658\"\n\n\n\n\n\n\n# assert na.rm = TRUE returns a number\nrmse_tst &lt;- getRMSE(resp, pred, na.rm = TRUE)\nprint(paste0(\"RMSE + na.rm = TRUE: \", rmse_tst[1]))\n\n[1] \"RMSE + na.rm = TRUE: 0.965990608767658\"\n\n# assert na.rm = FALSE returns NA\nrmse_tst &lt;- getRMSE(resp, pred, na.rm = FALSE)\nprint(paste0(\"RMSE + na.rm = FALSE: \", rmse_tst[1]))\n\n[1] \"RMSE + na.rm = FALSE: NA\"\n\n\n\n\n\n\n\ngetMAE &lt;- function (response, predicted, ...){\n  mean(abs(response - predicted), ...)\n}\n\n\n\n\n\n\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10 * x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\nmae_tst &lt;- getMAE(resp,pred)\nprint(paste0(\"MAE + all numeric: \", mae_tst[1]))\n\n[1] \"MAE + all numeric: 0.815577593682669\"\n\n\n\n\n\n\nrando_index_1 &lt;- sample(length(resp),1)\nrando_index_2 &lt;- sample(length(pred),1)\nresp[rando_index_1] &lt;- NA_real_\npred[rando_index_2] &lt;- NA_real_\nmae_tst &lt;- getMAE(resp,pred)\nprint(paste0(\"MAE + na.rm = TRUE: \", mae_tst[1]))\n\n[1] \"MAE + na.rm = TRUE: NA\"\n\n\n\n\n\n\n# assert na.rm = TRUE returns a number\nmae_tst &lt;- getMAE(resp, pred, na.rm = TRUE)\nprint(paste0(\"MAE + na.rm = TRUE: \", mae_tst[1]))\n\n[1] \"MAE + na.rm = TRUE: 0.824222492527251\"\n\n# assert na.rm = FALSE returns NA\nmae_tst &lt;- getMAE(resp, pred, na.rm = FALSE)\nprint(paste0(\"MAE + na.rm = FALSE: \", mae_tst[1]))\n\n[1] \"MAE + na.rm = FALSE: NA\"\n\n\n\n\n\n\n\nsnoop &lt;- function(resp,\n                  pred,\n                  metrics = c(\"rmse\",\"RMSE\",\"getRMSE\",\"mae\",\"MAE\",\"getMAE\"), ...){\n  if (!(is.numeric(resp) & \n        is.vector(resp)  & \n        is.atomic(resp)  &\n        is.numeric(pred) &\n        is.atomic(pred)  &\n        is.vector(pred))){\n    warning(\"Prediction and Response should be numeric vectors\")\n    \n  }\n  # dotdotdot &lt;- names(list(...))\n  # print(dotdotdot)\n  metrics &lt;- tolower(metrics)\n  result &lt;- list(rmse = NULL, mae = NULL)\n  \n  if(is.null(metrics)){\n    result$rmse &lt;- getRMSE(resp, pred, ...)\n    result$mae  &lt;- getMAE(resp, pred, ...)\n  }\n  else {\n    if(\"rmse\" %in% metrics | \"getrmse\" %in% metrics){\n      result$rmse &lt;- getRMSE(resp, pred, ...)\n    }\n    if(\"mae\" %in% metrics | \"getmae\" %in% metrics){\n      result$mae &lt;- getMAE(resp,pred, ...)\n    }\n    return(result)\n  }\n}\n\n\n\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10 * x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\nrmse_tst &lt;- snoop(resp, pred, \"rmse\")\nprint(paste0(\"RMSE (all): \", rmse_tst[1], \"  MAE (assert: NULL): \", rmse_tst[2]))\n\n[1] \"RMSE (all): 0.958167655151933  MAE (assert: NULL): NULL\"\n\nmae_tst &lt;- snoop(resp, pred, \"MAE\")\nprint(paste0(\"MAE (assert: NULL): \", mae_tst[1], \"  MAE (all): \", mae_tst[2]))\n\n[1] \"MAE (assert: NULL): NULL  MAE (all): 0.815577593682669\"\n\nboth_tst &lt;- snoop(resp, pred)\nprint(paste0(\"RMSE (all): \", both_tst[1], \"  MAE (all): \", both_tst[2]))\n\n[1] \"RMSE (all): 0.958167655151933  MAE (all): 0.815577593682669\"\n\n\n\n\n\n\nrando_index_1 &lt;- sample(length(resp),1)\nrando_index_2 &lt;- sample(length(pred),1)\nresp[rando_index_1] &lt;- NA_real_\npred[rando_index_2] &lt;- NA_real_\n\nrmse_na_tst &lt;- snoop(resp, pred, \"rmse\", na.rm = TRUE)\nprint(paste0(\"RMSE + na.rm = TRUE: \", rmse_na_tst[1]))\n\n[1] \"RMSE + na.rm = TRUE: 0.965990608767658\"\n\nmae_na_tst &lt;- snoop(resp, pred, \"MAE\", na.rm = TRUE)\nprint(paste0(\"MAE + na.rm = TRUE: \", mae_na_tst[2]))\n\n[1] \"MAE + na.rm = TRUE: 0.824222492527251\"\n\nboth_na_tst &lt;- snoop(resp, pred,na.rm = TRUE)\nprint(paste0(\"RMSE + na.rm = TRUE: \", both_na_tst[1], \"  MAE + na.rm = TRUE: \", both_na_tst[2]))\n\n[1] \"RMSE + na.rm = TRUE: 0.965990608767658  MAE + na.rm = TRUE: 0.824222492527251\"\n\n\n\n\n\n\ndf &lt;- data.frame(col1 = 0.1, col2 = 0.2)\ndf_tst &lt;- snoop(resp, df)\n\nWarning in snoop(resp, df): Prediction and Response should be numeric vectors\n\n\nWarning in mean.default((response - predicted)^2, ...): argument is not numeric\nor logical: returning NA\n\n\nWarning in mean.default(abs(response - predicted), ...): argument is not\nnumeric or logical: returning NA\n\ndf_tst &lt;- snoop(df, pred, \"rmse\")\n\nWarning in snoop(df, pred, \"rmse\"): Prediction and Response should be numeric\nvectors\n\n\nWarning in mean.default((response - predicted)^2, ...): argument is not numeric\nor logical: returning NA\n\n\n\n\n\n\n\n\n\n\n\n\n\n#store key\n# usethis::edit_r_environ()\nreadRenviron(\"~/.Renviron\")\nnews_api_key &lt;- Sys.getenv(\"NEWS_API_KEY\")\n\nquery &lt;- URLencode(\"FEMA+Militia+Chimney Rock\")\nfrom_date &lt;- \"2024-10-01\"\nto_date &lt;- format(Sys.Date(), \"%Y-%m-%d\")\nurl &lt;- paste0(\"https://newsapi.org/v2/everything?q=\", query,\n              \"&from=\", from_date,\n              \"&to=\", to_date,\n              \"&sortBy=popularity&apiKey=\", news_api_key)\n\nnews_info &lt;-GET(url) |&gt;\n  content(\"text\") |&gt;\n  fromJSON(flatten = TRUE, simplifyDataFrame = TRUE) |&gt;\n  pluck(\"articles\")\n\n\n\n\n\nnews_query &lt;- function(subject, start_date, api_key){\n  query &lt;- URLencode(subject)\n  start_date &lt;- start_date\n  end_date &lt;- format(Sys.Date(), \"%Y-%m-%d\")\n  api_key &lt;- api_key\n  \n  url &lt;- paste0(\"https://newsapi.org/v2/everything?q=\", query,\n                \"&from=\", start_date,\n                \"&to=\", end_date,\n                \"&sortBy=popularity&apiKey=\", api_key)\n\n  news_info &lt;-GET(url) |&gt;\n  content(\"text\") |&gt;\n  fromJSON(flatten = TRUE, simplifyDataFrame = TRUE) |&gt;\n  pluck(\"articles\")\n\n  return(news_info)\n}\n\nwhy_we_cant_have_nice_things &lt;- news_query(\"FEMA+Militia+Chimney Rock\", \"2024-09-23\", \"f01ded9eed0b4378b34210f03df9026f\")\ngeology_geneaology_genesis &lt;- news_query(\"Craigtown\", \"2024-09-23\", \"f01ded9eed0b4378b34210f03df9026f\")\n\n\n\n\n\n# Summarize name of the source as a 1-way contingency table\ntable(why_we_cant_have_nice_things$source.name)\n\n\n                   [Removed]                     ABC News \n                           2                            2 \n          Al Jazeera English                     BBC News \n                           1                            1 \n              Breitbart News             Dianeravitch.net \n                           1                            1 \n                 esquire.com                     Fox News \n                           1                            1 \n                    HuffPost            Insurance Journal \n                           1                            1 \nInternational Business Times                     Mediaite \n                           1                            1 \n                    NBC News                New York Post \n                           1                            1 \n                    Newsweek                          PBS \n                           3                            1 \n                   Raw Story                       Reason \n                           1                            1 \n               Roanoke Times                The Daily Dot \n                           1                            1 \n                    VOA News                 Wonkette.com \n                           1                            1 \n                   WSB Radio               WSOC Charlotte \n                           1                            1 \n\n\n\n\n\n\nwhy_we_cant_have_nice_things &lt;- why_we_cant_have_nice_things |&gt;\n  mutate(publishedAt = ymd_hms(publishedAt, tz=\"UTC\")) |&gt;\n  arrange(publishedAt) |&gt;\n  mutate(pub_diff = publishedAt - lag(publishedAt))\n  \n\ngeology_geneaology_genesis &lt;- geology_geneaology_genesis |&gt;\n  mutate(publishedAt = ymd_hms(publishedAt, tz=\"UTC\")) |&gt;\n  arrange(publishedAt) |&gt;\n  mutate(pub_diff = publishedAt - lag(publishedAt))\n\n\n\n\n\n\n\n\n\n\n\n\n\nggg &lt;- geology_geneaology_genesis |&gt;\n        select(publishedAt, pub_diff) |&gt;\n        mutate(publishedAt = as.Date(publishedAt)) |&gt;\n        map(\\(x) list(mean = mean(as.numeric(x), na.rm = TRUE),\n                      sd = sd(x, na.rm = TRUE),\n                      median = median(x, na.rm = TRUE)))\nprint(ggg)\n\n$publishedAt\n$publishedAt$mean\n[1] 20007.57\n\n$publishedAt$sd\n[1] 1.718249\n\n$publishedAt$median\n[1] \"2024-10-11\"\n\n\n$pub_diff\n$pub_diff$mean\n[1] 20.88176\n\n$pub_diff$sd\n[1] 27.26363\n\n$pub_diff$median\nTime difference of 8.245556 hours"
  },
  {
    "objectID": "hw6.html#task-1",
    "href": "hw6.html#task-1",
    "title": "hw6.qmd",
    "section": "",
    "text": "What is the purpose of the lapply() function? What is the equivalent purrr function?\n\nlapply applies a function to each element of a list\npurrr equivalent function is map ()\n\nSuppose we have a list called my_list. Each element of the list is a numeric data frame (all columns are numeric). Write code to use lapply() to run the code cor(numeric_matrix, method = “kendall”)\n\n\nlibrary(purrr)\nhelp(\"matrix\")\nnumeric_matrix &lt;- list(matrix(rnorm(25), ncol=5), matrix(rnorm(25), ncol=5))\nlapply_example &lt;- lapply(numeric_matrix, FUN = cor,  method = \"kendall\")\n\n\nWhat are two advantages of using purrr functions instead of the BaseR apply family?\n\nautomatic handling of data types and type consistency through the map_* functions\naddressing the same inconsistent approach to function arguments and implementations in BaseR.\n\nWhat is a side-effect function?\n\nA side effect function is a function that represents, but does not alter the underlying data (e.g. print)\n\nWhy can you name a variable sd in a function and not cause any issues with the sd function?\n\nNamespace and scoping. Variables inside of functions are scoped to the local function. This means the variable will only exist during the function runtime. Once the function returns, the sd variable will be deallocated from memory. Since the function sd is a different object in a separately scoped namespace (stats) than the variable sd, R will only look for a more global scope if no locally scoped sd object does not exist."
  },
  {
    "objectID": "hw6.html#task-2---writing-r-functions",
    "href": "hw6.html#task-2---writing-r-functions",
    "title": "hw6.qmd",
    "section": "",
    "text": "getRMSE &lt;- function (response, predicted){\n  sqrt(mean((response - predicted)^2))\n}\n\n\n\n\ngetRMSE &lt;- function (response, predicted, ...){\n  sqrt(mean((response - predicted)^2, ...))\n}\n\n\n\n\n\n\n\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10 * x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\nrmse_tst &lt;- getRMSE(resp, pred)\nprint(paste0(\"RMSE + all numeric: \", rmse_tst[1]))\n\n[1] \"RMSE + all numeric: 0.958167655151933\"\n\n\n\n\n\n\nrando_index_1 &lt;- sample(length(resp),1)\nrando_index_2 &lt;- sample(length(pred),1)\nresp[rando_index_1] &lt;- NA_real_\npred[rando_index_2] &lt;- NA_real_\nrmse_tst &lt;- getRMSE(resp, pred, na.rm = TRUE)\nprint(paste0(\"RMSE + na.rm = TRUE: \", rmse_tst[1]))\n\n[1] \"RMSE + na.rm = TRUE: 0.965990608767658\"\n\n\n\n\n\n\n# assert na.rm = TRUE returns a number\nrmse_tst &lt;- getRMSE(resp, pred, na.rm = TRUE)\nprint(paste0(\"RMSE + na.rm = TRUE: \", rmse_tst[1]))\n\n[1] \"RMSE + na.rm = TRUE: 0.965990608767658\"\n\n# assert na.rm = FALSE returns NA\nrmse_tst &lt;- getRMSE(resp, pred, na.rm = FALSE)\nprint(paste0(\"RMSE + na.rm = FALSE: \", rmse_tst[1]))\n\n[1] \"RMSE + na.rm = FALSE: NA\"\n\n\n\n\n\n\n\ngetMAE &lt;- function (response, predicted, ...){\n  mean(abs(response - predicted), ...)\n}\n\n\n\n\n\n\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10 * x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\nmae_tst &lt;- getMAE(resp,pred)\nprint(paste0(\"MAE + all numeric: \", mae_tst[1]))\n\n[1] \"MAE + all numeric: 0.815577593682669\"\n\n\n\n\n\n\nrando_index_1 &lt;- sample(length(resp),1)\nrando_index_2 &lt;- sample(length(pred),1)\nresp[rando_index_1] &lt;- NA_real_\npred[rando_index_2] &lt;- NA_real_\nmae_tst &lt;- getMAE(resp,pred)\nprint(paste0(\"MAE + na.rm = TRUE: \", mae_tst[1]))\n\n[1] \"MAE + na.rm = TRUE: NA\"\n\n\n\n\n\n\n# assert na.rm = TRUE returns a number\nmae_tst &lt;- getMAE(resp, pred, na.rm = TRUE)\nprint(paste0(\"MAE + na.rm = TRUE: \", mae_tst[1]))\n\n[1] \"MAE + na.rm = TRUE: 0.824222492527251\"\n\n# assert na.rm = FALSE returns NA\nmae_tst &lt;- getMAE(resp, pred, na.rm = FALSE)\nprint(paste0(\"MAE + na.rm = FALSE: \", mae_tst[1]))\n\n[1] \"MAE + na.rm = FALSE: NA\"\n\n\n\n\n\n\n\nsnoop &lt;- function(resp,\n                  pred,\n                  metrics = c(\"rmse\",\"RMSE\",\"getRMSE\",\"mae\",\"MAE\",\"getMAE\"), ...){\n  if (!(is.numeric(resp) & \n        is.vector(resp)  & \n        is.atomic(resp)  &\n        is.numeric(pred) &\n        is.atomic(pred)  &\n        is.vector(pred))){\n    warning(\"Prediction and Response should be numeric vectors\")\n    \n  }\n  # dotdotdot &lt;- names(list(...))\n  # print(dotdotdot)\n  metrics &lt;- tolower(metrics)\n  result &lt;- list(rmse = NULL, mae = NULL)\n  \n  if(is.null(metrics)){\n    result$rmse &lt;- getRMSE(resp, pred, ...)\n    result$mae  &lt;- getMAE(resp, pred, ...)\n  }\n  else {\n    if(\"rmse\" %in% metrics | \"getrmse\" %in% metrics){\n      result$rmse &lt;- getRMSE(resp, pred, ...)\n    }\n    if(\"mae\" %in% metrics | \"getmae\" %in% metrics){\n      result$mae &lt;- getMAE(resp,pred, ...)\n    }\n    return(result)\n  }\n}\n\n\n\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10 * x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\nrmse_tst &lt;- snoop(resp, pred, \"rmse\")\nprint(paste0(\"RMSE (all): \", rmse_tst[1], \"  MAE (assert: NULL): \", rmse_tst[2]))\n\n[1] \"RMSE (all): 0.958167655151933  MAE (assert: NULL): NULL\"\n\nmae_tst &lt;- snoop(resp, pred, \"MAE\")\nprint(paste0(\"MAE (assert: NULL): \", mae_tst[1], \"  MAE (all): \", mae_tst[2]))\n\n[1] \"MAE (assert: NULL): NULL  MAE (all): 0.815577593682669\"\n\nboth_tst &lt;- snoop(resp, pred)\nprint(paste0(\"RMSE (all): \", both_tst[1], \"  MAE (all): \", both_tst[2]))\n\n[1] \"RMSE (all): 0.958167655151933  MAE (all): 0.815577593682669\"\n\n\n\n\n\n\nrando_index_1 &lt;- sample(length(resp),1)\nrando_index_2 &lt;- sample(length(pred),1)\nresp[rando_index_1] &lt;- NA_real_\npred[rando_index_2] &lt;- NA_real_\n\nrmse_na_tst &lt;- snoop(resp, pred, \"rmse\", na.rm = TRUE)\nprint(paste0(\"RMSE + na.rm = TRUE: \", rmse_na_tst[1]))\n\n[1] \"RMSE + na.rm = TRUE: 0.965990608767658\"\n\nmae_na_tst &lt;- snoop(resp, pred, \"MAE\", na.rm = TRUE)\nprint(paste0(\"MAE + na.rm = TRUE: \", mae_na_tst[2]))\n\n[1] \"MAE + na.rm = TRUE: 0.824222492527251\"\n\nboth_na_tst &lt;- snoop(resp, pred,na.rm = TRUE)\nprint(paste0(\"RMSE + na.rm = TRUE: \", both_na_tst[1], \"  MAE + na.rm = TRUE: \", both_na_tst[2]))\n\n[1] \"RMSE + na.rm = TRUE: 0.965990608767658  MAE + na.rm = TRUE: 0.824222492527251\"\n\n\n\n\n\n\ndf &lt;- data.frame(col1 = 0.1, col2 = 0.2)\ndf_tst &lt;- snoop(resp, df)\n\nWarning in snoop(resp, df): Prediction and Response should be numeric vectors\n\n\nWarning in mean.default((response - predicted)^2, ...): argument is not numeric\nor logical: returning NA\n\n\nWarning in mean.default(abs(response - predicted), ...): argument is not\nnumeric or logical: returning NA\n\ndf_tst &lt;- snoop(df, pred, \"rmse\")\n\nWarning in snoop(df, pred, \"rmse\"): Prediction and Response should be numeric\nvectors\n\n\nWarning in mean.default((response - predicted)^2, ...): argument is not numeric\nor logical: returning NA"
  },
  {
    "objectID": "hw6.html#task-3---query-an-api-and-tidy-style-function",
    "href": "hw6.html#task-3---query-an-api-and-tidy-style-function",
    "title": "hw6.qmd",
    "section": "",
    "text": "#store key\n# usethis::edit_r_environ()\nreadRenviron(\"~/.Renviron\")\nnews_api_key &lt;- Sys.getenv(\"NEWS_API_KEY\")\n\nquery &lt;- URLencode(\"FEMA+Militia+Chimney Rock\")\nfrom_date &lt;- \"2024-10-01\"\nto_date &lt;- format(Sys.Date(), \"%Y-%m-%d\")\nurl &lt;- paste0(\"https://newsapi.org/v2/everything?q=\", query,\n              \"&from=\", from_date,\n              \"&to=\", to_date,\n              \"&sortBy=popularity&apiKey=\", news_api_key)\n\nnews_info &lt;-GET(url) |&gt;\n  content(\"text\") |&gt;\n  fromJSON(flatten = TRUE, simplifyDataFrame = TRUE) |&gt;\n  pluck(\"articles\")\n\n\n\n\n\nnews_query &lt;- function(subject, start_date, api_key){\n  query &lt;- URLencode(subject)\n  start_date &lt;- start_date\n  end_date &lt;- format(Sys.Date(), \"%Y-%m-%d\")\n  api_key &lt;- api_key\n  \n  url &lt;- paste0(\"https://newsapi.org/v2/everything?q=\", query,\n                \"&from=\", start_date,\n                \"&to=\", end_date,\n                \"&sortBy=popularity&apiKey=\", api_key)\n\n  news_info &lt;-GET(url) |&gt;\n  content(\"text\") |&gt;\n  fromJSON(flatten = TRUE, simplifyDataFrame = TRUE) |&gt;\n  pluck(\"articles\")\n\n  return(news_info)\n}\n\nwhy_we_cant_have_nice_things &lt;- news_query(\"FEMA+Militia+Chimney Rock\", \"2024-09-23\", \"f01ded9eed0b4378b34210f03df9026f\")\ngeology_geneaology_genesis &lt;- news_query(\"Craigtown\", \"2024-09-23\", \"f01ded9eed0b4378b34210f03df9026f\")\n\n\n\n\n\n# Summarize name of the source as a 1-way contingency table\ntable(why_we_cant_have_nice_things$source.name)\n\n\n                   [Removed]                     ABC News \n                           2                            2 \n          Al Jazeera English                     BBC News \n                           1                            1 \n              Breitbart News             Dianeravitch.net \n                           1                            1 \n                 esquire.com                     Fox News \n                           1                            1 \n                    HuffPost            Insurance Journal \n                           1                            1 \nInternational Business Times                     Mediaite \n                           1                            1 \n                    NBC News                New York Post \n                           1                            1 \n                    Newsweek                          PBS \n                           3                            1 \n                   Raw Story                       Reason \n                           1                            1 \n               Roanoke Times                The Daily Dot \n                           1                            1 \n                    VOA News                 Wonkette.com \n                           1                            1 \n                   WSB Radio               WSOC Charlotte \n                           1                            1 \n\n\n\n\n\n\nwhy_we_cant_have_nice_things &lt;- why_we_cant_have_nice_things |&gt;\n  mutate(publishedAt = ymd_hms(publishedAt, tz=\"UTC\")) |&gt;\n  arrange(publishedAt) |&gt;\n  mutate(pub_diff = publishedAt - lag(publishedAt))\n  \n\ngeology_geneaology_genesis &lt;- geology_geneaology_genesis |&gt;\n  mutate(publishedAt = ymd_hms(publishedAt, tz=\"UTC\")) |&gt;\n  arrange(publishedAt) |&gt;\n  mutate(pub_diff = publishedAt - lag(publishedAt))\n\n\n\n\n\n\n\n\n\n\n\n\n\nggg &lt;- geology_geneaology_genesis |&gt;\n        select(publishedAt, pub_diff) |&gt;\n        mutate(publishedAt = as.Date(publishedAt)) |&gt;\n        map(\\(x) list(mean = mean(as.numeric(x), na.rm = TRUE),\n                      sd = sd(x, na.rm = TRUE),\n                      median = median(x, na.rm = TRUE)))\nprint(ggg)\n\n$publishedAt\n$publishedAt$mean\n[1] 20007.57\n\n$publishedAt$sd\n[1] 1.718249\n\n$publishedAt$median\n[1] \"2024-10-11\"\n\n\n$pub_diff\n$pub_diff$mean\n[1] 20.88176\n\n$pub_diff$sd\n[1] 27.26363\n\n$pub_diff$median\nTime difference of 8.245556 hours"
  }
]